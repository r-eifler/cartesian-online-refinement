#include "dfs_open_list.h"

#include "open_list.h"

#include "../option_parser.h"
#include "../plugin.h"

#include "../utils/memory.h"

#include <cassert>
#include <deque>
#include <list>

using namespace std;


template<class Entry>
class DFSOpenList : public OpenList<Entry> {

	struct Mycomparison
	{
	  bool operator() (const pair<int, Entry> e1, const pair<int, Entry> e2) const
	  {
		return e1.first > e2.first;
	  }
	};
	
    //map<int, Bucket> buckets;
    //int size;
	list<priority_queue<pair<int, Entry>, vector<pair<int, Entry>>, Mycomparison >> open_list;
	int size;
	
    ScalarEvaluator *evaluator;

    bool newdepth;

protected:
    virtual void do_insertion(EvaluationContext &eval_context,
                              const Entry &entry) override;							  

public:
    explicit DFSOpenList(const Options &opts);
    DFSOpenList(ScalarEvaluator *eval,
                           bool preferred_only);
    virtual ~DFSOpenList() override = default;


	bool backtrack = false;

    virtual Entry remove_min(vector<int> *key = nullptr) override;
    virtual bool empty() const override;
    virtual void clear() override;
    virtual void get_involved_heuristics(set<Heuristic *> &hset) override;
    virtual bool is_dead_end(
        EvaluationContext &eval_context) const override;
    virtual bool is_reliable_dead_end(
        EvaluationContext &eval_context) const override;
};



template<class Entry>
DFSOpenList<Entry>::DFSOpenList(const Options &opts)
    : OpenList<Entry>(opts.get<bool>("pref_only")),
      size(0),
      evaluator(opts.get<ScalarEvaluator *>("eval")),
	  newdepth(true){
}

template<class Entry>
DFSOpenList<Entry>::DFSOpenList(
    ScalarEvaluator *evaluator, bool preferred_only)
    : OpenList<Entry>(preferred_only),
      size(0),
      evaluator(evaluator), 
	  newdepth(true){
}

template<class Entry>
void DFSOpenList<Entry>::do_insertion(
    EvaluationContext &eval_context, const Entry &entry) {
	backtrack = false;
    int key = eval_context.get_heuristic_value(evaluator);	
	if (newdepth) {
            open_list.push_front(priority_queue<pair<int, Entry>, vector<pair<int, Entry>>, Mycomparison >());
            newdepth = false;
    }
    open_list.front().push(std::make_pair(key,entry));
    size++;
}

template<class Entry>
Entry DFSOpenList<Entry>::remove_min(vector<int> *key) {	
	key->push_back(backtrack);
	backtrack = false;
	newdepth = true;
	assert(size > 0);
	priority_queue<pair<int, Entry>, vector<pair<int, Entry>>, Mycomparison > &top = open_list.front();
	assert(top.size() > 0);
	Entry result = top.top().second;
	top.pop();
	
	if(top.size() == 0){
		backtrack = true;
		open_list.pop_front();
	}

	size--;	
	return result;
}

template<class Entry>
bool DFSOpenList<Entry>::empty() const {
    return size == 0;
}

template<class Entry>
void DFSOpenList<Entry>::clear() {
    open_list.clear();
    size = 0;
}

template<class Entry>
void DFSOpenList<Entry>::get_involved_heuristics(
    set<Heuristic *> &hset) {
    evaluator->get_involved_heuristics(hset);
}

template<class Entry>
bool DFSOpenList<Entry>::is_dead_end(
    EvaluationContext &eval_context) const {
    return eval_context.is_heuristic_infinite(evaluator);
}

template<class Entry>
bool DFSOpenList<Entry>::is_reliable_dead_end(
    EvaluationContext &eval_context) const {
    return is_dead_end(eval_context) && evaluator->dead_ends_are_reliable();
}

DFSOpenListFactory::DFSOpenListFactory(
    const Options &options)
    : options(options) {
}

unique_ptr<StateOpenList>
DFSOpenListFactory::create_state_open_list() {
    return utils::make_unique_ptr<DFSOpenList<StateOpenListEntry>>(options);
}

unique_ptr<EdgeOpenList>
DFSOpenListFactory::create_edge_open_list() {
    return utils::make_unique_ptr<DFSOpenList<EdgeOpenListEntry>>(options);
}

static shared_ptr<OpenListFactory> _parse(OptionParser &parser) {
    parser.document_synopsis(
        "Standard open list",
        "Standard open list that uses a single evaluator");
    parser.add_option<ScalarEvaluator *>("eval", "scalar evaluator");
    parser.add_option<bool>(
        "pref_only",
        "insert only nodes generated by preferred operators", "false");

    Options opts = parser.parse();
    if (parser.dry_run())
        return nullptr;
    else
        return make_shared<DFSOpenListFactory>(opts);
}

static PluginShared<OpenListFactory> _plugin("dfs_open_list", _parse);
